"""
This type stub file was generated by pyright.
"""

from amqpstorm.base import Handler

"""AMQPStorm Channel.Queue."""
LOGGER = ...
class Queue(Handler):
    """RabbitMQ Queue Operations."""
    __slots__ = ...
    def declare(self, queue=..., passive=..., durable=..., exclusive=..., auto_delete=..., arguments=...):
        """Declare a Queue.

        :param str queue: Queue name
        :param bool passive: Do not create
        :param bool durable: Durable queue
        :param bool exclusive: Request exclusive access
        :param bool auto_delete: Automatically delete when not in use
        :param dict arguments: Queue key/value arguments

        :raises AMQPInvalidArgument: Invalid Parameters
        :raises AMQPChannelError: Raises if the channel encountered an error.
        :raises AMQPConnectionError: Raises if the connection
                                     encountered an error.

        :rtype: dict
        """
        ...
    
    def delete(self, queue=..., if_unused=..., if_empty=...):
        """Delete a Queue.

        :param str queue: Queue name
        :param bool if_unused: Delete only if unused
        :param bool if_empty: Delete only if empty

        :raises AMQPInvalidArgument: Invalid Parameters
        :raises AMQPChannelError: Raises if the channel encountered an error.
        :raises AMQPConnectionError: Raises if the connection
                                     encountered an error.

        :rtype: dict
        """
        ...
    
    def purge(self, queue):
        """Purge a Queue.

        :param str queue: Queue name

        :raises AMQPInvalidArgument: Invalid Parameters
        :raises AMQPChannelError: Raises if the channel encountered an error.
        :raises AMQPConnectionError: Raises if the connection
                                     encountered an error.

        :rtype: dict
        """
        ...
    
    def bind(self, queue=..., exchange=..., routing_key=..., arguments=...):
        """Bind a Queue.

        :param str queue: Queue name
        :param str exchange: Exchange name
        :param str routing_key: The routing key to use
        :param dict arguments: Bind key/value arguments

        :raises AMQPInvalidArgument: Invalid Parameters
        :raises AMQPChannelError: Raises if the channel encountered an error.
        :raises AMQPConnectionError: Raises if the connection
                                     encountered an error.

        :rtype: dict
        """
        ...
    
    def unbind(self, queue=..., exchange=..., routing_key=..., arguments=...):
        """Unbind a Queue.

        :param str queue: Queue name
        :param str exchange: Exchange name
        :param str routing_key: The routing key used
        :param dict arguments: Unbind key/value arguments

        :raises AMQPInvalidArgument: Invalid Parameters
        :raises AMQPChannelError: Raises if the channel encountered an error.
        :raises AMQPConnectionError: Raises if the connection
                                     encountered an error.

        :rtype: dict
        """
        ...
    


