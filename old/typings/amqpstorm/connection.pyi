"""
This type stub file was generated by pyright.
"""

from amqpstorm.base import Stateful

"""AMQPStorm Connection."""
LOGGER = ...
DEFAULT_HEARTBEAT_INTERVAL = ...
DEFAULT_SOCKET_TIMEOUT = ...
DEFAULT_VIRTUAL_HOST = ...
class Connection(Stateful):
    """RabbitMQ Connection.

    e.g.
    ::

        import amqpstorm
        connection = amqpstorm.Connection('localhost', 'guest', 'guest')

    Using a SSL Context:
    ::

        import ssl
        import amqpstorm
        ssl_options = {
            'context': ssl.create_default_context(cafile='ca_certificate.pem'),
            'server_hostname': 'rmq.eandersson.net',
            'check_hostname': True,        # New 2.8.0, default is False
            'verify_mode': 'required',     # New 2.8.0, default is 'none'
        }
        connection = amqpstorm.Connection(
            'rmq.eandersson.net', 'guest', 'guest', port=5671,
            ssl=True, ssl_options=ssl_options
        )

    :param str hostname: Hostname
    :param str username: Username
    :param str password: Password
    :param int port: Server port
    :param str virtual_host: Virtual host
    :param int heartbeat: RabbitMQ Heartbeat interval
    :param int,float timeout: Socket timeout
    :param bool ssl: Enable SSL
    :param dict ssl_options: SSL kwargs
    :param dict client_properties: None or dict of client properties
    :param bool lazy: Lazy initialize the connection

    :raises AMQPConnectionError: Raises if the connection
                                 encountered an error.
    """
    __slots__ = ...
    def __init__(self, hostname, username, password, port=..., **kwargs) -> None:
        ...
    
    def __enter__(self): # -> Connection:
        ...
    
    def __exit__(self, exception_type, exception_value, _): # -> None:
        ...
    
    @property
    def channels(self): # -> dict[Unknown, Unknown]:
        """Returns a dictionary of the Channels currently available.

        :rtype: dict
        """
        ...
    
    @property
    def fileno(self): # -> int | None:
        """Returns the Socket File number.

        :rtype: integer,None
        """
        ...
    
    @property
    def is_blocked(self): # -> bool:
        """Is the connection currently being blocked from publishing by
        the remote server.

        :rtype: bool
        """
        ...
    
    @property
    def max_allowed_channels(self): # -> int:
        """Returns the maximum allowed channels for the connection.

        :rtype: int
        """
        ...
    
    @property
    def max_frame_size(self): # -> int:
        """Returns the maximum allowed frame size for the connection.

        :rtype: int
        """
        ...
    
    @property
    def server_properties(self): # -> dict[Unknown, Unknown]:
        """Returns the RabbitMQ Server Properties.

        :rtype: dict
        """
        ...
    
    @property
    def socket(self): # -> socket | None:
        """Returns an instance of the Socket used by the Connection.

        :rtype: socket.socket
        """
        ...
    
    def channel(self, rpc_timeout=..., lazy=...):
        """Open a Channel.

        :param int rpc_timeout: Timeout before we give up waiting for an RPC
                                response from the server.

        :raises AMQPInvalidArgument: Invalid Parameters
        :raises AMQPChannelError: Raises if the channel encountered an error.
        :raises AMQPConnectionError: Raises if the connection
                                     encountered an error.

        :rtype: amqpstorm.Channel
        """
        ...
    
    def check_for_errors(self): # -> None:
        """Check Connection for errors.

        :raises AMQPConnectionError: Raises if the connection
                                     encountered an error.
        :return:
        """
        ...
    
    def close(self): # -> None:
        """Close the Connection.

        :raises AMQPConnectionError: Raises if the connection
                                     encountered an error.
        :return:
        """
        ...
    
    def open(self): # -> None:
        """Open Connection.

        :raises AMQPConnectionError: Raises if the connection
                                     encountered an error.
        """
        ...
    
    def write_frame(self, channel_id, frame_out): # -> None:
        """Marshal and write an outgoing pamqp frame to the Socket.

        :param int channel_id: Channel ID.
        :param specification.Frame frame_out: Amqp frame.

        :return:
        """
        ...
    
    def write_frames(self, channel_id, frames_out): # -> None:
        """Marshal and write multiple outgoing pamqp frames to the Socket.

        :param int channel_id: Channel ID/
        :param list frames_out: Amqp frames.

        :return:
        """
        ...
    


