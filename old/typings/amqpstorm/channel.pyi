"""
This type stub file was generated by pyright.
"""

from amqpstorm.base import BaseChannel

"""AMQPStorm Connection.Channel."""
LOGGER = ...
CONTENT_FRAME = ...
class Channel(BaseChannel):
    """RabbitMQ Channel.

    e.g.
    ::

        channel = connection.channel()
    """
    __slots__ = ...
    def __init__(self, channel_id, connection, rpc_timeout) -> None:
        ...
    
    def __enter__(self): # -> Channel:
        ...
    
    def __exit__(self, exception_type, exception_value, _): # -> None:
        ...
    
    def __int__(self) -> int:
        ...
    
    @property
    def basic(self): # -> Basic:
        """RabbitMQ Basic Operations.

            e.g.
            ::

                message = channel.basic.get(queue='hello_world')

        :rtype: amqpstorm.basic.Basic
        """
        ...
    
    @property
    def exchange(self): # -> Exchange:
        """RabbitMQ Exchange Operations.

            e.g.
            ::

                channel.exchange.declare(exchange='hello_world')

        :rtype: amqpstorm.exchange.Exchange
        """
        ...
    
    @property
    def queue(self): # -> Queue:
        """RabbitMQ Queue Operations.

            e.g.
            ::

                channel.queue.declare(queue='hello_world')

        :rtype: amqpstorm.queue.Queue
        """
        ...
    
    @property
    def tx(self): # -> Tx:
        """RabbitMQ Tx Operations.

            e.g.
            ::

                channel.tx.commit()

        :rtype: amqpstorm.tx.Tx
        """
        ...
    
    def build_inbound_messages(self, break_on_empty=..., to_tuple=..., auto_decode=..., message_impl=...): # -> Generator[tuple[Unknown, Unknown, Unknown, Unknown | dict[Any, Any]] | BaseMessage | Message, None, None]:
        """Build messages in the inbound queue.

        :param bool break_on_empty: Should we break the loop when there are
                                    no more messages in our inbound queue.

                                    This does not guarantee that the queue
                                    is emptied before the loop is broken, as
                                    messages may be consumed faster then
                                    they are being delivered by RabbitMQ,
                                    causing the loop to be broken prematurely.
        :param bool to_tuple: Should incoming messages be converted to a
                              tuple before delivery.
        :param bool auto_decode: Auto-decode strings when possible.
        :param class message_impl: Optional message class to use, derived from
                                   BaseMessage, for created messages. Defaults
                                   to Message.
        :raises AMQPInvalidArgument: Invalid Parameters
        :raises AMQPChannelError: Raises if the channel encountered an error.
        :raises AMQPConnectionError: Raises if the connection
                                     encountered an error.

        :rtype: :py:class:`generator`
        """
        ...
    
    def close(self, reply_code=..., reply_text=...): # -> None:
        """Close Channel.

        :param int reply_code: Close reply code (e.g. 200)
        :param str reply_text: Close reply text

        :raises AMQPInvalidArgument: Invalid Parameters
        :raises AMQPChannelError: Raises if the channel encountered an error.
        :raises AMQPConnectionError: Raises if the connection
                                     encountered an error.

        :return:
        """
        ...
    
    def check_for_errors(self): # -> None:
        """Check connection and channel for errors.

        :raises AMQPChannelError: Raises if the channel encountered an error.
        :raises AMQPConnectionError: Raises if the connection
                                     encountered an error.
        :return:
        """
        ...
    
    def check_for_exceptions(self): # -> None:
        """Check channel for exceptions.

        :raises AMQPChannelError: Raises if the channel encountered an error.

        :return:
        """
        ...
    
    def confirm_deliveries(self): # -> dict[Unknown, Unknown] | None:
        """Set the channel to confirm that each message has been
        successfully delivered.

        :raises AMQPChannelError: Raises if the channel encountered an error.
        :raises AMQPConnectionError: Raises if the connection
                                     encountered an error.

        :return:
        """
        ...
    
    @property
    def confirming_deliveries(self): # -> bool:
        """Is the channel set to confirm deliveries.

        :return:
        """
        ...
    
    def on_frame(self, frame_in): # -> None:
        """Handle frame sent to this specific channel.

        :param pamqp.Frame frame_in: Amqp frame.
        :return:
        """
        ...
    
    def open(self): # -> None:
        """Open Channel.

        :return:
        """
        ...
    
    def process_data_events(self, to_tuple=..., auto_decode=...): # -> None:
        """Consume inbound messages.

        :param bool to_tuple: Should incoming messages be converted to a
                              tuple before delivery.
        :param bool auto_decode: Auto-decode strings when possible.

        :raises AMQPChannelError: Raises if the channel encountered an error.
        :raises AMQPConnectionError: Raises if the connection
                                     encountered an error.

        :return:
        """
        ...
    
    def rpc_request(self, frame_out, connection_adapter=...): # -> dict[Unknown, Unknown] | None:
        """Perform a RPC Request.

        :param specification.Frame frame_out: Amqp frame.
        :rtype: dict
        """
        ...
    
    def start_consuming(self, to_tuple=..., auto_decode=...): # -> None:
        """Start consuming messages.

        :param bool to_tuple: Should incoming messages be converted to a
                              tuple before delivery.
        :param bool auto_decode: Auto-decode strings when possible.

        :raises AMQPChannelError: Raises if the channel encountered an error.
        :raises AMQPConnectionError: Raises if the connection
                                     encountered an error.

        :return:
        """
        ...
    
    def stop_consuming(self): # -> None:
        """Stop consuming messages.

        :raises AMQPChannelError: Raises if the channel encountered an error.
        :raises AMQPConnectionError: Raises if the connection
                                     encountered an error.

        :return:
        """
        ...
    
    def write_frame(self, frame_out): # -> None:
        """Write a pamqp frame from the current channel.

        :param specification.Frame frame_out: A single pamqp frame.

        :return:
        """
        ...
    
    def write_frames(self, frames_out): # -> None:
        """Write multiple pamqp frames from the current channel.

        :param list frames_out: A list of pamqp frames.

        :return:
        """
        ...
    


