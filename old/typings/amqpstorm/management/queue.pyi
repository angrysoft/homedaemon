"""
This type stub file was generated by pyright.
"""

from amqpstorm.management.base import ManagementHandler

API_QUEUE = ...
API_QUEUE_PURGE = ...
API_QUEUES = ...
API_QUEUES_VIRTUAL_HOST = ...
API_QUEUE_BINDINGS = ...
API_QUEUE_BIND = ...
API_QUEUE_UNBIND = ...
class Queue(ManagementHandler):
    def get(self, queue, virtual_host=...):
        """Get Queue details.

        :param queue: Queue name
        :param str virtual_host: Virtual host name

        :raises ApiError: Raises if the remote server encountered an error.
        :raises ApiConnectionError: Raises if there was a connectivity issue.

        :rtype: dict
        """
        ...
    
    def list(self, virtual_host=..., show_all=...):
        """List Queues.

        :param str virtual_host: Virtual host name
        :param bool show_all: List all Queues

        :raises ApiError: Raises if the remote server encountered an error.
        :raises ApiConnectionError: Raises if there was a connectivity issue.

        :rtype: list
        """
        ...
    
    def declare(self, queue=..., virtual_host=..., passive=..., durable=..., auto_delete=..., arguments=...):
        """Declare a Queue.

        :param str queue: Queue name
        :param str virtual_host: Virtual host name
        :param bool passive: Do not create
        :param bool durable: Durable queue
        :param bool auto_delete: Automatically delete when not in use
        :param dict,None arguments: Queue key/value arguments

        :raises ApiError: Raises if the remote server encountered an error.
        :raises ApiConnectionError: Raises if there was a connectivity issue.

        :rtype: dict
        """
        ...
    
    def delete(self, queue, virtual_host=...):
        """Delete a Queue.

        :param str queue: Queue name
        :param str virtual_host: Virtual host name

        :raises ApiError: Raises if the remote server encountered an error.
        :raises ApiConnectionError: Raises if there was a connectivity issue.

        :rtype: dict
        """
        ...
    
    def purge(self, queue, virtual_host=...):
        """Purge a Queue.

        :param str queue: Queue name
        :param str virtual_host: Virtual host name

        :raises ApiError: Raises if the remote server encountered an error.
        :raises ApiConnectionError: Raises if there was a connectivity issue.

        :rtype: None
        """
        ...
    
    def bindings(self, queue, virtual_host=...):
        """Get Queue bindings.

        :param str queue: Queue name
        :param str virtual_host: Virtual host name

        :raises ApiError: Raises if the remote server encountered an error.
        :raises ApiConnectionError: Raises if there was a connectivity issue.

        :rtype: list
        """
        ...
    
    def bind(self, queue=..., exchange=..., routing_key=..., virtual_host=..., arguments=...):
        """Bind a Queue.

        :param str queue: Queue name
        :param str exchange: Exchange name
        :param str routing_key: The routing key to use
        :param str virtual_host: Virtual host name
        :param dict,None arguments: Bind key/value arguments

        :raises ApiError: Raises if the remote server encountered an error.
        :raises ApiConnectionError: Raises if there was a connectivity issue.

        :rtype: None
        """
        ...
    
    def unbind(self, queue=..., exchange=..., routing_key=..., virtual_host=..., properties_key=...):
        """Unbind a Queue.

        :param str queue: Queue name
        :param str exchange: Exchange name
        :param str routing_key: The routing key to use
        :param str virtual_host: Virtual host name
        :param str properties_key:

        :raises ApiError: Raises if the remote server encountered an error.
        :raises ApiConnectionError: Raises if there was a connectivity issue.

        :rtype: None
        """
        ...
    


